defn and (a, b) :
   if a : b
   else : a

defn or (a, b) :
   if a : a
   else : b

defn not (x) :
   if x : null
   else : 0

var check-array = array(10, 0)
defn begin-check () :
   var i = 0
   while i < 10 :
      check-array[i] = 0
      i = i + 1
defn check (x) :
   check-array[x] = check-array[x] + 1
defn check-good? () :
   var good = 1
   var i = 1
   while i < 10 :
      good = and(good, check-array[i] <= 1)
      i = i + 1
   good

defn solvehelper (b, i) :   
   if i == 81 :
      0
   else if b.pos(i) == 0 :
      var s = null
      var n = 1      
      while n <= 9 :
         if not(s) :
            b.set-pos(i, n)
            if b.good?() :
               s = or(s, solvehelper(b, i + 1))               
         n = n + 1
      if s :
         s
      else :
         b.set-pos(i, 0)
         null
   else :
      solvehelper(b, i + 1)     

defn board () :
   object :
      var array = array(9 * 9, 0)
      method pos (i) :
         this.array[i]
      method set-pos (i, x) :
         this.array[i] = x
      method get (r, c) :
         this.array[r * 9 + c]
      method set (r, c, x) :
         this.array[r * 9 + c] = x
      method print () :
         var r = 0
         while r < 9 :
            var c = 0
            while c < 9 :
               if c > 0 : printf(" ")
               if this[r, c] == 0 : printf("_")
               else : printf("~", this[r,c])
               c = c + 1
            printf("\n")   
            r = r + 1            
      method good? () :
         var good? = 1
         
         ;Rows
         var r = 0
         while r < 9 :
            begin-check()
            var c = 0
            while c < 9 :
               check(this[r,c])               
               c = c + 1
            good? = and(good?, check-good?())
            r = r + 1

         ;Columns
         var c = 0
         while c < 9 :
            begin-check()
            var r = 0
            while r < 9 :
               check(this[r,c])
               r = r + 1
            good? = and(good?, check-good?())
            c = c + 1

         ;Cells
         var cell = 0
         while cell < 9 :
            var r = (cell / 3) * 3
            var c = (cell % 3) * 3
            begin-check()
            var ri = r
            while ri < r + 3 :
               var ci = c
               while ci < c + 3 :
                  check(this[ri,ci])
                  ci = ci + 1
               ri = ri + 1
            good? = and(good?, check-good?())
            cell = cell + 1
            
         good?         
      method solve () :
         solvehelper(this, 0) 

defn main () :
   var b = board()
   b[0,0] = 8
   b[0,1] = 0
   b[0,2] = 0
   b[0,3] = 1
   b[0,4] = 0
   b[0,5] = 3
   b[0,6] = 4
   b[0,7] = 0
   b[0,8] = 0
   b[1,0] = 0
   b[1,1] = 3
   b[1,2] = 5
   b[1,3] = 7
   b[1,4] = 8
   b[1,5] = 0
   b[1,6] = 0
   b[1,7] = 6
   b[1,8] = 2
   b[2,0] = 4
   b[2,1] = 7
   b[2,2] = 0
   b[2,3] = 0
   b[2,4] = 0
   b[2,5] = 6
   b[2,6] = 0
   b[2,7] = 9
   b[2,8] = 0
   b[3,0] = 0
   b[3,1] = 0
   b[3,2] = 0
   b[3,3] = 0
   b[3,4] = 0
   b[3,5] = 0
   b[3,6] = 0
   b[3,7] = 2
   b[3,8] = 4
   b[4,0] = 0
   b[4,1] = 1
   b[4,2] = 0
   b[4,3] = 3
   b[4,4] = 0
   b[4,5] = 5
   b[4,6] = 0
   b[4,7] = 8
   b[4,8] = 0
   b[5,0] = 2
   b[5,1] = 8
   b[5,2] = 0
   b[5,3] = 0
   b[5,4] = 0
   b[5,5] = 0
   b[5,6] = 0
   b[5,7] = 0
   b[5,8] = 0
   b[6,0] = 0
   b[6,1] = 2
   b[6,2] = 0
   b[6,3] = 6
   b[6,4] = 0
   b[6,5] = 0
   b[6,6] = 0
   b[6,7] = 3
   b[6,8] = 9
   b[7,0] = 1
   b[7,1] = 9
   b[7,2] = 0
   b[7,3] = 0
   b[7,4] = 7
   b[7,5] = 2
   b[7,6] = 6
   b[7,7] = 4
   b[7,8] = 0
   b[8,0] = 0
   b[8,1] = 0
   b[8,2] = 8
   b[8,3] = 5
   b[8,4] = 0
   b[8,5] = 9
   b[8,6] = 0
   b[8,7] = 0
   b[8,8] = 1

   printf("=== Given Puzzle ===\n")
   b.print()

   printf("\n=== Solution ===\n")
   b.solve()
   b.print()

main()


;============================================================
;======================== OUTPUT ============================
;============================================================
;
;=== Given Puzzle ===
;8 _ _ 1 _ 3 4 _ _
;_ 3 5 7 8 _ _ 6 2
;4 7 _ _ _ 6 _ 9 _
;_ _ _ _ _ _ _ 2 4
;_ 1 _ 3 _ 5 _ 8 _
;2 8 _ _ _ _ _ _ _
;_ 2 _ 6 _ _ _ 3 9
;1 9 _ _ 7 2 6 4 _
;_ _ 8 5 _ 9 _ _ 1
;
;=== Solution ===
;8 6 2 1 9 3 4 5 7
;9 3 5 7 8 4 1 6 2
;4 7 1 2 5 6 3 9 8
;3 5 6 9 1 8 7 2 4
;7 1 4 3 2 5 9 8 6
;2 8 9 4 6 7 5 1 3
;5 2 7 6 4 1 8 3 9
;1 9 3 8 7 2 6 4 5
;6 4 8 5 3 9 2 7 1